name: WakuWaku-CD

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_NAME: wakuwaku-backend
  S3_BUCKET_NAME: wakuwaku-cicd-bucket
  CODE_DEPLOY_APP_NAME: wakuwaku-code-deploy
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: wakuwaku-cicd

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./application-prod.yml

      - name: make application-API-KEY.yml
        run: |
          cd ./src/main/resources
          touch ./application-API-KEY.yml
          echo "${{ secrets.APPLICATION_API_KEY_YML }}" > ./application-API-KEY.yml

      # gradlew 파일에 실행 권한을 부여
      - name: Permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # 다운로드한 종속성 캐싱을 포함하여 GiHub 작업에서 최적의 사용을 위해 Gradle을 구성한다.
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      # zip 파일을 생성
      - name: Make Zip File
        run: zip -qq -r ./$GITHUB_SHA.zip .
        shell: bash

      # ACCESS TOKEN을 통해 AWS 계정의 서비스에 접근할 수 있는 권한을 얻음
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # S3 버킷에 zip 파일을 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$GITHUB_SHA.zip

      # CodeDeploy에 배포 요청을 날린다.
      - name: Code Deploy To EC2 instance
        run: aws deploy create-deployment
          --application-name $CODE_DEPLOY_APP_NAME
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name $CODE_DEPLOY_DEPLOYMENT_GROUP_NAME
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip