name: WakuWaku-CD

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: make application-prod.yml
        run: |
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./application-prod.yml

      - name: make application-API-KEY.yml
        run: |
          cd ./src/main/resources
          touch ./application-API-KEY.yml
          echo "${{ secrets.APPLICATION_API_KEY_YML }}" > ./application-API-KEY.yml

      - name: make Test application-API-KEY.yml
        run: |
          cd ./src/test/resources
          touch ./application-API-KEY.yml
          echo "${{ secrets.APPLICATION_API_KEY_YML }}" > ./application-API-KEY.yml

      # gradlew 파일에 실행 권한을 부여
      - name: Permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # 다운로드한 종속성 캐싱을 포함하여 GiHub 작업에서 최적의 사용을 위해 Gradle을 구성한다.
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # API 문서를 생성하고 해당 문서를 복사
      - name: Generate and Copy OpenAPI Documentation
        run: ./gradlew copyOasToSwagger

      # - name: API 문서 파일 Artifact 업로드
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: openapi3.yaml
      #     path: build/api-spec/openapi3.yaml
      #     overwrite: true
          
      # - name: API 문서 파일 Artifact 다운로드
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: openapi3.yaml
      #     path: src/main/resources/static/swagger-ui/

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/wakuwaku .
          echo "Pushing image to Docker Hub..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/wakuwaku

      - name: docker-compose.yml 파일 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./docker-compose.yml"
          target: ${{ secrets.DOCKER_COMPOSE_PATH }}

      - name: EC2 Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo docker rm -f $(sudo docker ps -aq)  
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/wakuwaku
            cd ${{ secrets.DOCKER_COMPOSE_PATH }}
            docker compose up -d
            docker image prune -f
